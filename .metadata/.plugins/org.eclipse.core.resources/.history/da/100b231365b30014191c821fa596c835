package github.mfzszgs.pinball;

import java.util.Timer;
import java.util.TimerTask;

import android.app.Activity;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.drawable.BitmapDrawable;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.DisplayMetrics;
import android.view.Display;
import android.view.MotionEvent;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;

public class MyPinBall extends Activity {
	
	private GameConf gameconf;
	//
	private float currentX = 0f;
	// 桌面的宽度
	private int tableWidth;
	// 桌面的高度
	private int tableHeight;
	//每个格子的大小
	private int size;
	//更新周期
	private int period=400;
	// 球拍的垂直位置
	private int racketY;
	// 下面定义球拍的高度和宽度
	private int RACKET_HEIGHT;
	private int RACKET_WIDTH;
	// 小球的大小
	private int BALL_SIZE;
	// 小球纵向的运行速度
	private int ySpeed;
//	Random rand = new Random();
	// 小球横向的运行速度
	private int xSpeed;
	// ballX和ballY代表小球的座标
	private int ballX;
	private int ballY;
	// racketX代表球拍的水平位置
	private int racketX;
	// 游戏是否结束的旗标
	private boolean isLose = false;
	private BitmapDrawable bitmapdrawable;
	private Bitmap bitmap;
	
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		// 去掉窗口标题
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		// 全屏显示
		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
				WindowManager.LayoutParams.FLAG_FULLSCREEN);
		// 获取窗口管理器
		WindowManager windowManager = getWindowManager();
		Display display = windowManager.getDefaultDisplay();
		DisplayMetrics metrics = new DisplayMetrics();
		display.getMetrics(metrics);
		// 获得屏幕宽和高
		tableWidth = metrics.widthPixels;
		tableHeight = metrics.heightPixels;
		//　设置格子大小
		size=tableWidth/18;
		//　设置球拍高宽
		RACKET_HEIGHT =size;
		RACKET_WIDTH=4*size;
		BALL_SIZE=size;
		xSpeed=size;
		ySpeed=size;
		racketX=tableWidth/2-2*size;
		racketY = tableHeight - size;
		ballX=tableWidth/2;
		ballY=size;

		// 创建GameView组件
		final GameView gameView = new GameView(this);
		gameView.setBackgroundColor(Color.rgb(255,255, 255));
		setContentView(gameView);
		
		//设置ｂｉｔｍａｐ
		bitmapdrawable=(BitmapDrawable)getResources().getDrawable(R.drawable.size);
		bitmap=Bitmap.createScaledBitmap(bitmapdrawable.getBitmap(), size, size, true);
		final Handler handler = new Handler() {
			public void handleMessage(Message msg) {
				if (msg.what == 0x123) {
					gameView.invalidate();
				}
			}
		};

		final Timer timer = new Timer();
		timer.schedule(new TimerTask() // ①
				{

					@Override
					public void run() {
						// 如果小球碰到左边边框
						if (ballX < BALL_SIZE || ballX >= tableWidth - BALL_SIZE) {
							xSpeed = -xSpeed;
						}
						// 如果小球高度超出了球拍位置，且横向不在球拍范围之内，游戏结束。
						if (ballY >= racketY - BALL_SIZE
								&& (ballX < racketX || ballX > racketX
										+ RACKET_WIDTH)) {
							timer.cancel();
							// 设置游戏是否结束的旗标为true。
							isLose = true;
						}
						// 如果小球位于球拍之内，且到达球拍位置，小球反弹
						else if (ballY < BALL_SIZE
								|| (ballY >= racketY - BALL_SIZE
										&& ballX > racketX && ballX <= racketX
										+ RACKET_WIDTH)) {
							ySpeed = -ySpeed;
						}
						// 小球座标增加
						ballY += ySpeed;
						ballX += xSpeed;
						// 发送消息，通知系统重绘组件
						handler.sendEmptyMessage(0x123);
					}
				}, 0, period);
	}

	class GameView extends View {
		Paint paint = new Paint();

		public GameView(Context context) {
			super(context);
			setFocusable(true);
		}

		// 重写View的onDraw方法，实现绘画
		public void onDraw(Canvas canvas) {
			paint.setStyle(Paint.Style.FILL);
			// 设置去锯齿
			paint.setAntiAlias(true);
			// 如果游戏已经结束
			if (isLose) {
				paint.setColor(Color.RED);
				paint.setTextSize(40);
				canvas.drawText("游戏已结束"+" h="+tableHeight+" w="+tableWidth, 50, 200, paint);
			}
			// 如果游戏还未结束
			else {
				// 设置颜色，并绘制小球
				canvas.drawBitmap(bitmap,ballX,ballY,paint);
				// 设置颜色，并绘制球 拍
				for(int i=0;i<4;i++)
					canvas.drawBitmap(bitmap,racketX+i*size,racketY,paint);
//				paint.setColor(Color.rgb(80, 80, 200));
//				canvas.drawRect(racketX, racketY, racketX + RACKET_WIDTH,
//						racketY + RACKET_HEIGHT, paint);
			}
		}

		@Override
		public boolean onTouchEvent(MotionEvent event) {
			if (currentX > event.getX()) {
				racketX -= 10;
			} else if (currentX < event.getX()) {
				racketX += 10;;
			}
			invalidate();
			currentX=event.getX();
			return true;
		}
	}
}
